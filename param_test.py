# 如果在调用参数时，缺省参数的值没有传入，则取其默认值：
def param_test01(num1, num2=100):
    print(num1 + num2)
    print("num1 = %d, num2 = %d" % (num1, num2))


# 不定长参数 参数的数量无法预估，则可以使用不定长参数：
# 注意：缺省参数需要放在 *args 后面， 但如果有**kwargs的话，该参数必须是放在最后的。
# 这是一个Python函数 fn，它接受多个参数，包括位置参数 a 和 b，以及两个可变参数 *args 和 **kwargs。让我们逐步解释它的工作方式：
# a 和 b 是普通的位置参数，它们必须按照指定的位置传递值。在这个例子中，a 被赋值为 1，b 被赋值为 2。
# *args 是一个用来收集多余位置参数的元组（tuple），它允许函数接受不定数量的额外位置参数。在这个例子中，*args 收集了传递给函数的所有额外位置参数，即 3, 4, 和 5。这些值被存储在一个元组中，但在函数体中没有直接使用。
# **kwargs 是一个用来收集关键字参数的字典（dictionary），它允许函数接受不定数量的额外关键字参数。在这个例子中，**kwargs 收集了传递给函数的所有额外关键字参数，即 m=6, n=7, 和 p=8。这些参数以字典的形式存储在 kwargs 中。
# 在函数体内，使用 kwargs.items() 来迭代关键字参数的字典。这个循环遍历了字典中的每个键值对，并打印了值（value）。因此，对于传递给函数的关键字参数 m, n, 和 p，它会打印它们的值。
def fn(a, b, *args, **kwargs):
    for key, value in kwargs.items():
        print("key=%s" % value)


# 注意：带有默认值的参数一定要位于参数列表的最后面。
if __name__ == '__main__':
    # param_test01(10)  # 110
    # param_test01(10, 20)  # 30
    fn(1, 2, 3, 4, 5, m=6, n=7, p=8)  # 输出 8 6 7
